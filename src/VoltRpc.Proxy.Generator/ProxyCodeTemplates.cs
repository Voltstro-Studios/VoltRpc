namespace VoltRpc.Proxy.Generator;

/// <summary>
///     Contains code and templates for proxy generation
/// </summary>
public static class ProxyCodeTemplates
{
    private const string AutoGeneratedWarning =
        @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by VoltRpc.Proxy.Generator
//
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------";

    public const string GenerateProxyGeneratedDefaultNameSpace = "VoltRpc.Proxy.Generated";
    private const string GenerateProxyAttributeNamespace = "VoltRpc.Proxy";
    private const string GenerateProxyAttributeClass = "GenerateProxyAttribute";

    public const string GenerateProxyAttributeOverrideName = "GeneratedName";

    public static readonly string GenerateProxyAttributeName =
        $"{GenerateProxyAttributeNamespace}.{GenerateProxyAttributeClass}";

    public static readonly string GenerateProxyAttributeCode = $@"{AutoGeneratedWarning}
using System;

namespace {GenerateProxyAttributeNamespace}
{{
    [AttributeUsage(AttributeTargets.Interface, Inherited = false, AllowMultiple = false)]
    public sealed class {GenerateProxyAttributeClass} : Attribute
    {{
        public GenerateProxyAttribute()
        {{
        }}

        public string {GenerateProxyAttributeOverrideName} {{ get; set; }}
    }}
}}";

    public static readonly string ProxyCodeTemplate = @"
using VoltRpc.Communication;

namespace VoltRpc.Proxy.Generated
{
    public class {{ classname }} : {{ inheritedtnterface }}
    {
        private readonly Client client;

        public {{ classname }}(Client client)
        {
            this.client = client;
        }
        {{ for method in methods }}
        public {{ method.returntype }} {{ method.name }}(
        {{- for argument in method.arguments -}}
            {{- if argument.isref -}}
                ref {{ end -}}
            {{- if argument.isout -}}
                out {{ end -}}
            {{ argument.type }} {{ argument.name }}{{ argument.trailing }}
        {{- end -}})
        {
            object[] returnObjects = client.InvokeMethod(""{{ method.interfacenamespace }}.{{ method.interfacename }}.{{ method.name }}"", new object[] { 
            {{- $returnObjectsCounter = 1 -}}
            {{- for argument in method.arguments -}}
                {{- if !argument.isref && !argument.isout -}}
                    {{ argument.name }}
                    {{- if $returnObjectsCounter != method.arguments.size -}}
                        , {{ end -}}
                    {{ $returnObjectsCounter = $returnObjectsCounter + 1 }}
                {{- end -}}
            {{- end -}}
            } );
            {{- $parameterIndex = 0 -}}
            {{- if !method.returnsvoid -}}
                {{ $parameterIndex = 1 }} {{- end -}}
            {{- for argument in method.arguments -}}
                {{- if argument.isref -}}
                    {{ argument.name }} = ({{ argument.type }})returnObjects[{{ $parameterIndex }}];
                    {{ $parameterIndex = $parameterIndex + 1 }} {{ end }}
                {{- if argument.isout -}}
                    {{ argument.name }} = ({{ argument.type }})returnObjects[{{ $parameterIndex }}];
                    {{ $parameterIndex = $parameterIndex + 1 }} {{ end }}
            {{- end -}}
            {{- if !method.returnsvoid -}}
                return ({{ method.returntype }}) returnObjects[0];
            {{- end }}
        }
        {{ end }}
    }
}";
}